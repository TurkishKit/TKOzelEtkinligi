/*:
 ## Ã–geleri DeÄŸiÅŸtirmek
 
 DeÄŸiÅŸken bir dizide nasÄ±l Ã¶ge ekleyebileceÄŸinizi ve Ã§Ä±karabileceÄŸinizi gÃ¶rdÃ¼k. Peki ya bir Ã¶geyi baÅŸka biriyle deÄŸiÅŸtirmek isterseniz?
 
 Ã–ncesinde, dizideki bir Ã¶geye, dizinini kullanarak nasÄ±l eriÅŸebileceÄŸinizi gÃ¶rdÃ¼nÃ¼z:
 
 */
var dondurmalar = ["Ã‡ikolatalÄ±", "VanilyalÄ±", "Ã‡ilekli", "Antep FÄ±stÄ±klÄ±"]

let ilkDondurma = dondurmalar[0] // HatÄ±rlayÄ±n, ilk Ã¶ge sÄ±fÄ±rÄ±ncÄ± dizinde
/*:
 Swift dilinde, ifadenin `[0]` olan kÄ±smÄ± bir _alt dizin_ olarak bilinir.

 DeÄŸiÅŸken bir dizide, var olan bir dizindeki deÄŸeri yeniden tanÄ±mlamak iÃ§in alt dizini kullanabilirsiniz:
*/

dondurmalar[0] = "Bademli"

let yeniÄ°lkDondurma = dondurmalar[0]

/*:
 - callout(Deney): "Antep FÄ±stÄ±klÄ±" deÄŸerini; dizide halihazÄ±rda kullanÄ±lmayan, "Ã‡ikolata ParÃ§acÄ±klÄ±" gibi, bir deÄŸer ile deÄŸiÅŸtirin. DeÄŸiÅŸikliÄŸi yaptÄ±ÄŸÄ±nÄ±zdan emin olmak iÃ§in sonuÃ§ alanÄ±nÄ± kontrol edin.
 */
// "Antep FÄ±stÄ±klÄ±" deÄŸerini baÅŸka bir dondurma ile deÄŸiÅŸtirin.

/*:
 
 Dizide bulunmayan bir dizin kullanmayÄ± denerseniz, bir hata ile karÅŸÄ±laÅŸacaksÄ±nÄ±z. DeÄŸiÅŸken bir dizide alt dizinleri kullanarak sadece deÄŸerleri deÄŸiÅŸtirebilirsiniz, yeni bir deÄŸer ekleyemez veya Ã§Ä±karamazsÄ±nÄ±z. ğŸ˜‰
 
 - callout(Deney): AÅŸaÄŸÄ±daki ifadede, bir hata almadan alt dizine verebileceÄŸiniz en yÃ¼ksek deÄŸer kaÃ§? O deÄŸer, neden kullanabileceÄŸiniz en yÃ¼ksek sayÄ±?
 */
dondurmalar[1] = "Ä°talyan Karamelli"

//: Bir sonraki sayfada, Ã¶ÄŸrendiklerinizi gÃ¶zden geÃ§irelim! ğŸ™‚
//:
//: [Geri](@previous)  |  Sayfa 10  |  [Ä°leri: Ã–zetle](@next)
