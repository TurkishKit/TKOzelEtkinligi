/*:
 ## DeÄŸiÅŸkenlerle Ã‡alÄ±ÅŸmak
 
 ArtÄ±k deÄŸiÅŸkenleri tanÄ±mlamayÄ± biliyorsunuz, ancak onlarÄ± ne zaman ve nasÄ±l kullanÄ±rsÄ±nÄ±z?
 
 DeÄŸiÅŸkenleri, programÄ±nÄ±zda bir deÄŸerin deÄŸiÅŸmesi gereken yerlerde kullanÄ±rsÄ±nÄ±z. Bunun bir Ã¶rneÄŸi, bir oyunun puanÄ± olabilir. Oyuncu daha fazla puan aldÄ±kÃ§a, kodunuzda da puanÄ± tutan deÄŸiÅŸkenin deÄŸerini gÃ¼ncelleyebilirsiniz.
 
 Ã–rneÄŸin, bu deÄŸiÅŸkenin baÅŸlangÄ±Ã§taki deÄŸeri sÄ±fÄ±r olarak tanÄ±mlanÄ±r:
*/
var puan = 0
//: EÄŸer oyuncu on puan kazanÄ±rsa, puanÄ± gÃ¼ncelleyebilirsiniz:
puan = 10
//: Oyuncu, beÅŸ puan daha kazandÄ±ÄŸÄ±nda puanÄ± tekrar gÃ¼ncelleyebilirsiniz:
puan = 15
//: Bu gÃ¼zel bir ÅŸey, ancak `puan` deÄŸiÅŸkeninin yeni deÄŸerini hesaplarken mevcut deÄŸerini kullanabilmek daha da gÃ¼zel olurdu. BeÅŸ puan daha eklemek iÃ§in, ÅŸunu yapabilirsiniz:
puan = puan + 5
//: Bir deÄŸiÅŸkenin deÄŸerini kendisi artÄ± baÅŸka bir ÅŸeye ayarlamak, bir deÄŸeri aynÄ± anda hem kullandÄ±ÄŸÄ±nÄ±z hem de deÄŸiÅŸtirdiÄŸiniz garip bir dÃ¶ngÃ¼ gibi gelebilir; ancak gerÃ§ekte olan, bu deÄŸil. YukarÄ±daki kod tek bir satÄ±r olsa bile; Swift, ifadeyi iki farklÄ± aÅŸamada deÄŸerlendirir.
//:
//: Ä°lk olarak, eÅŸitliÄŸin saÄŸ tarafÄ± -aynÄ± bir Playground sayfasÄ±nda tek baÅŸÄ±na yazÄ±lmÄ±ÅŸ gibi- hesaplanÄ±r. Bir deÄŸiÅŸkenle sadece bir hesaplama yapmak, onun deÄŸerini deÄŸiÅŸtirmez:
puan + 5
puan
puan + 3
puan
//: Ancak, bir hesaplama, bir deÄŸer atamasÄ±nÄ±n saÄŸ tarafÄ±nda ise; deÄŸiÅŸken, hesaplamanÄ±n sonucunu tutar ve yeni deÄŸer olarak onu alÄ±r:
puan = puan + 5
puan = puan + 3
/*:
 - callout(Deney): Bu satÄ±rlarÄ± ekledikten sonra `puan` deÄŸiÅŸkenininin deÄŸeri sizce ne olurdu? Deneyin ve keÅŸfedin! ğŸ˜‰
*/
//: - callout(Ã–rnek):
//: `puan = 5`\
//: `puan = puan + puan`





//: Sonraki adÄ±mda, `puan = puan + 5` iÃ§in daha kÄ±sa bir yol Ã¶ÄŸrenelim!
//:
//: [Geri: DeÄŸiÅŸken TanÄ±mlamak](@previous)  |  Sayfa 4  |  [Ä°leri: Bir Kestirme](@next)
