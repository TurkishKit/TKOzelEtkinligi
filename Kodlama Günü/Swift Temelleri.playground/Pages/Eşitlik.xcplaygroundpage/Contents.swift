/*:
 ## EÅŸitlik

 `true` ve `false` deÄŸerlerinin Ã¶zel deÄŸerler olduÄŸunu Ã¶ÄŸrendiniz. Direkt `Bool` deÄŸerleri yazmadan (ki bu pek karar almak sayÄ±lmaz), kod Ã¼zerinde nasÄ±l soru sorabilirsiniz? Bunu yapmanÄ±n bir yolu, _karÅŸÄ±laÅŸtÄ±rma ifadeleridir._
 
 KarÅŸÄ±laÅŸtÄ±rma ifadeleri bir ÅŸey sÃ¶yler, ve Swift ise o ÅŸeyin `true` veya `false` olduÄŸunu sÃ¶yleyecektir. Bir karÅŸÄ±laÅŸtÄ±rma ifadesi Ã¼Ã§ parÃ§adan oluÅŸur:
 
 1. Bununla...
 2. aradaki iliÅŸki...
 3. ÅŸu
 
 Birinci ve Ã¼Ã§Ã¼ncÃ¼ kÄ±sÄ±mlar, Ã¼zerinde Ã§alÄ±ÅŸtÄ±ÄŸÄ±nÄ±z sayÄ±lar ve karakter dizileri gibi deÄŸerlerdir. Ä°kinci kÄ±sÄ±m ise yeni bir ÅŸey: bir _karÅŸÄ±laÅŸtÄ±rma operatÃ¶rÃ¼_. Ä°ÅŸte bir Ã¶rnek:
*/
1 == 2
/*:
 Ã‡ift eÅŸittir iÅŸareti `==` ifadenin sol ve saÄŸ taraflarÄ±nÄ±n eÅŸit olup olmadÄ±ÄŸÄ±nÄ± kontrol eder. Bu ifadede deÄŸiller, yani bu ifade yanlÄ±ÅŸ (`false`).
 
 - callout(Not): Tek baÅŸÄ±na eÅŸittir iÅŸaretini `=` karÅŸÄ±laÅŸtÄ±rma iÃ§in kullanamazsÄ±nÄ±z; Ã§Ã¼nkÃ¼ zaten, Ã¶nceki sayfalarda Ã¶ÄŸrendiÄŸiniz gibi, deÄŸer atamak iÃ§in kullanÄ±lÄ±yor.
 
 AÅŸaÄŸÄ±daki biraz daha karmaÅŸÄ±k Ã¶rnek ifade ise doÄŸru (`true`):
*/
10 == 9 + 1
//: Ä°simlendirdiÄŸiniz deÄŸerleri de kullanabilirsiniz ğŸ˜‰:
let yuz = 100
let onKereOn = 10 * 10
let dokuzKereOn = 9 * 10

yuz == onKereOn     // Bu doÄŸru,
yuz == dokuzKereOn  // bu ise yanlÄ±ÅŸ.
//: - callout(Deney): Siz de birkaÃ§ karÅŸÄ±laÅŸtÄ±rma yazmayÄ± deneyin. Ä°ki karakter dizisinin eÅŸit olup olmadÄ±ÄŸÄ±nÄ± bulabilir misiniz?


//: Bir sonraki sayfada, deÄŸerleri karÅŸÄ±laÅŸtÄ±rmak iÃ§in daha fazla yol keÅŸfedelim! ğŸ˜ƒ
//:
//: [Geri: DoÄŸru ve YanlÄ±ÅŸ](@previous)  |  Sayfa 17  |  [Ä°leri: Daha Fazla KarÅŸÄ±laÅŸtÄ±rma](@next)
