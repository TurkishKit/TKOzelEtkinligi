/*:
 ## Bir Kestirme
 
 Bir deÄŸiÅŸkenin mevcut deÄŸerini, yeni bir deÄŸere gÃ¼ncellerken nasÄ±l kullanabileceÄŸinizi gÃ¶rdÃ¼nÃ¼z:
 */
// DeÄŸer baÅŸta sÄ±fÄ±r
var puan = 0

// `puan` deÄŸiÅŸkeninin ÅŸimdiki deÄŸerini al, 2 ekle, sonucu yeni deÄŸer olarak ata
puan = puan + 2
/*:
 
 Bu tÃ¼r iÅŸlemler o kadar sÄ±k kullanÄ±lÄ±yor ki Swift dilinde toplama (`+`) ve eÅŸitleme (`=`) iÅŸlemlerini tek bir iÅŸlemde birleÅŸtiren `+=` Ã¶zel iÅŸareti bulunuyor.
 
Bu kod satÄ±rÄ±:
 
`puan = puan + 2`
 
bu satÄ±rla aynÄ± etkiye sahip:
 
`puan += 2`
 
- callout(Deney): YukarÄ±daki `puan = puan + 2` kod satÄ±rÄ±nÄ± `+=` iÅŸaretini kullanarak deÄŸiÅŸtirmeyi deneyin. `+=` iÅŸareti ile daha fazla puan ekleyen birkaÃ§ kod satÄ±rÄ± daha ekleyin.

 ### BirleÅŸik Atama
 Bu iÅŸaretin resmi dildeki ismi, _birleÅŸik atama operatÃ¶rÃ¼_. `+=` operatÃ¶rÃ¼nÃ¼, sadece sayÄ±larda deÄŸil, toplama operatÃ¶rÃ¼nÃ¼ `+` kullanabildiÄŸiniz her yerde kullanabilirsiniz! ğŸ™‚
 
 Ã–rneÄŸin, bu operatÃ¶r karakter dizileriyle de Ã§alÄ±ÅŸÄ±r:
*/
var karsilama = ""
karsilama += "Merhaba"
karsilama += " "
karsilama += "DÃ¼nya!"
//: - callout(Deney): BirleÅŸik atamayÄ± ve aÅŸaÄŸÄ±daki sabitleri kullanarak "Ek bir deÄŸer ekledik!!" ifadesini oluÅŸturmayÄ± deneyin. Ä°fadenin ilk kÄ±smÄ±, sizin iÃ§in yazÄ±lÄ±:
let kelime1 = "Ek"
let kelime3 = "deÄŸerler"
let kelime4 = "ekliyoruz!"
let bosluk = " "

var ifade = ""
ifade += kelime1
ifade += bosluk



/*:
SÄ±rada, deÄŸiÅŸikleri takip etmek iÃ§in sÄ±nÄ±rlarÄ± zorlamak var!
*/
//: [Geri: DeÄŸiÅŸkenlerle Ã‡alÄ±ÅŸmak](@previous)  |  Sayfa 5  |  [Ä°leri: Kafa KarÄ±ÅŸtÄ±rÄ±cÄ± DeÄŸiÅŸiklikler](@next)
